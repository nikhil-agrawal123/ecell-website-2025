'use client';
import React, { useState, useMemo } from 'react';
import Image from 'next/image';
import Link from 'next/link';
import eventsData from '@/data/PlannedEvents.json';

type ViewMode = 'month' | 'list';

interface Event {
  id: string;
  title: string;
  date: string;
  time?: string;
  location: string;
  description: string;
  category?: string;
  image?: string;
  registrationLink?: string;
  featured?: boolean;
  tags?: string[];
  instructor?: string;
  duration?: string;
  prize?: string;
}

const CalendarPage = () => {
  const [viewMode, setViewMode] = useState<ViewMode>('month');
  const [currentDate, setCurrentDate] = useState(new Date());
  const [selectedEvent, setSelectedEvent] = useState<Event | null>(null);

  // Combine all events from upcomingEvents and workshops
  const allEvents: Event[] = useMemo(() => {
    return [
      ...(eventsData.upcomingEvents || []),
      ...(eventsData.workshops || [])
    ].sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());
  }, []);

  // Get events for current month
  const currentMonthEvents = useMemo(() => {
    return allEvents.filter(event => {
      const eventDate = new Date(event.date);
      return eventDate.getMonth() === currentDate.getMonth() &&
             eventDate.getFullYear() === currentDate.getFullYear();
    });
  }, [allEvents, currentDate]);

  // Calendar helpers
  const getDaysInMonth = (date: Date) => {
    return new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();
  };

  const getFirstDayOfMonth = (date: Date) => {
    return new Date(date.getFullYear(), date.getMonth(), 1).getDay();
  };

  const monthNames = [
    'January', 'February', 'March', 'April', 'May', 'June',
    'July', 'August', 'September', 'October', 'November', 'December'
  ];

  const previousMonth = () => {
    setCurrentDate(new Date(currentDate.getFullYear(), currentDate.getMonth() - 1, 1));
  };

  const nextMonth = () => {
    setCurrentDate(new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 1));
  };

  const getEventsForDay = (day: number) => {
    return currentMonthEvents.filter(event => {
      const eventDate = new Date(event.date);
      return eventDate.getDate() === day;
    });
  };

  const getCategoryColor = (category?: string) => {
    const colors: { [key: string]: string } = {
      'Summit': 'from-purple-500 to-pink-500',
      'Hackathon': 'from-orange-500 to-red-500',
      'Workshop': 'from-blue-500 to-cyan-500',
      'Meetup': 'from-green-500 to-emerald-500',
      'default': 'from-purple-400 to-pink-500'
    };
    return colors[category || 'default'] || colors['default'];
  };

  const renderCalendarView = () => {
    const daysInMonth = getDaysInMonth(currentDate);
    const firstDay = getFirstDayOfMonth(currentDate);
    const days = [];

    // Empty cells for days before month starts
    for (let i = 0; i < firstDay; i++) {
      days.push(
        <div key={`empty-${i}`} className="aspect-square p-2 border border-gray-800"></div>
      );
    }

    // Days of the month
    for (let day = 1; day <= daysInMonth; day++) {
      const dayEvents = getEventsForDay(day);
      const isToday = new Date().getDate() === day &&
                      new Date().getMonth() === currentDate.getMonth() &&
                      new Date().getFullYear() === currentDate.getFullYear();

      days.push(
        <div
          key={day}
          className={`aspect-square p-2 border border-gray-800 hover:bg-gray-900 transition-colors cursor-pointer relative ${
            isToday ? 'bg-purple-900/20 border-purple-500/50' : ''
          }`}
        >
          <div className={`text-sm font-semibold mb-1 ${isToday ? 'text-purple-400' : 'text-gray-300'}`}>
            {day}
          </div>
          <div className="space-y-1 overflow-y-auto max-h-20">
            {dayEvents.map((event, idx) => (
              <div
                key={idx}
                onClick={() => setSelectedEvent(event)}
                className={`text-xs p-1 rounded bg-gradient-to-r ${getCategoryColor(event.category)} text-white truncate hover:opacity-80 transition-opacity`}
              >
                {event.title}
              </div>
            ))}
          </div>
        </div>
      );
    }

    return days;
  };

  const renderListView = () => {
    // Group events by month
    const eventsByMonth = allEvents.reduce((acc, event) => {
      const eventDate = new Date(event.date);
      const monthYear = `${monthNames[eventDate.getMonth()]} ${eventDate.getFullYear()}`;
      if (!acc[monthYear]) {
        acc[monthYear] = [];
      }
      acc[monthYear].push(event);
      return acc;
    }, {} as { [key: string]: Event[] });

    return (
      <div className="space-y-8">
        {Object.entries(eventsByMonth).map(([monthYear, events]) => (
          <div key={monthYear}>
            <h3 className="text-2xl font-bold mb-4 bg-gradient-to-r from-purple-400 via-pink-500 to-red-400 bg-clip-text text-transparent">
              {monthYear}
            </h3>
            <div className="space-y-4">
              {events.map((event) => (
                <div
                  key={event.id}
                  className="group bg-gray-900/50 border border-gray-800 rounded-lg p-6 hover:border-purple-500/50 transition-all cursor-pointer"
                  onClick={() => setSelectedEvent(event)}
                >
                  <div className="flex flex-col md:flex-row gap-4">
                    {/* Date Badge */}
                    <div className={`flex-shrink-0 w-20 h-20 rounded-lg bg-gradient-to-br ${getCategoryColor(event.category)} flex flex-col items-center justify-center text-white`}>
                      <div className="text-2xl font-bold">
                        {new Date(event.date).getDate()}
                      </div>
                      <div className="text-xs uppercase">
                        {monthNames[new Date(event.date).getMonth()].slice(0, 3)}
                      </div>
                    </div>

                    {/* Event Details */}
                    <div className="flex-grow">
                      <div className="flex items-start justify-between mb-2">
                        <div>
                          <h4 className="text-xl font-bold text-white group-hover:text-purple-400 transition-colors">
                            {event.title}
                          </h4>
                          <span className={`inline-block px-3 py-1 rounded-full text-xs font-semibold mt-2 bg-gradient-to-r ${getCategoryColor(event.category)} text-white`}>
                            {event.category}
                          </span>
                        </div>
                      </div>
                      <p className="text-gray-400 mb-2">{event.description}</p>
                      <div className="flex flex-wrap gap-4 text-sm text-gray-400">
                        {event.time && (
                          <div className="flex items-center gap-2">
                            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                            </svg>
                            {event.time}
                          </div>
                        )}
                        <div className="flex items-center gap-2">
                          <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                          </svg>
                          {event.location}
                        </div>
                        {event.duration && (
                          <div className="flex items-center gap-2">
                            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                            </svg>
                            {event.duration}
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        ))}
      </div>
    );
  };

  return (
    <div className="bg-black text-white font-sans min-h-screen">
      {/* Page Heading */}
      <div className="text-center pt-28 pb-8 px-6 md:px-12">
        <h1 className="text-4xl md:text-6xl font-extrabold bg-gradient-to-br from-purple-400 via-pink-500 to-red-400 bg-clip-text text-transparent drop-shadow-lg">
          Events Calendar
        </h1>
        <p className="text-lg md:text-xl mt-4 text-gray-300 max-w-3xl mx-auto">
          Stay updated with all our upcoming workshops, hackathons, and events
        </p>
      </div>

      {/* View Toggle and Navigation */}
      <div className="px-6 md:px-12 mb-8">
        <div className="flex flex-col md:flex-row justify-between items-center gap-4 max-w-7xl mx-auto">
          {/* View Mode Toggle */}
          <div className="flex gap-2 bg-gray-900 p-1 rounded-lg">
            <button
              onClick={() => setViewMode('month')}
              className={`px-6 py-2 rounded-md transition-all font-semibold ${
                viewMode === 'month'
                  ? 'bg-gradient-to-r from-purple-500 to-pink-500 text-white'
                  : 'text-gray-400 hover:text-white'
              }`}
            >
              <div className="flex items-center gap-2">
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                </svg>
                Month
              </div>
            </button>
            <button
              onClick={() => setViewMode('list')}
              className={`px-6 py-2 rounded-md transition-all font-semibold ${
                viewMode === 'list'
                  ? 'bg-gradient-to-r from-purple-500 to-pink-500 text-white'
                  : 'text-gray-400 hover:text-white'
              }`}
            >
              <div className="flex items-center gap-2">
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h16M4 18h16" />
                </svg>
                List
              </div>
            </button>
          </div>

          {/* Month Navigation (only show in month view) */}
          {viewMode === 'month' && (
            <div className="flex items-center gap-4">
              <button
                onClick={previousMonth}
                className="p-2 rounded-lg bg-gray-900 hover:bg-gray-800 transition-colors"
              >
                <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                </svg>
              </button>
              <div className="text-2xl font-bold min-w-[200px] text-center">
                {monthNames[currentDate.getMonth()]} {currentDate.getFullYear()}
              </div>
              <button
                onClick={nextMonth}
                className="p-2 rounded-lg bg-gray-900 hover:bg-gray-800 transition-colors"
              >
                <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                </svg>
              </button>
            </div>
          )}
        </div>
      </div>

      {/* Calendar/List Content */}
      <div className="px-6 md:px-12 pb-12">
        <div className="max-w-7xl mx-auto">
          {viewMode === 'month' ? (
            <div className="bg-gray-900/30 rounded-xl border border-gray-800 p-4 md:p-6">
              {/* Days of Week Header */}
              <div className="grid grid-cols-7 gap-2 mb-2">
                {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(day => (
                  <div key={day} className="text-center font-semibold text-gray-400 py-2">
                    {day}
                  </div>
                ))}
              </div>
              {/* Calendar Grid */}
              <div className="grid grid-cols-7 gap-2">
                {renderCalendarView()}
              </div>

              {/* Legend */}
              <div className="mt-6 pt-6 border-t border-gray-800">
                <h4 className="text-sm font-semibold text-gray-400 mb-3">Event Categories</h4>
                <div className="flex flex-wrap gap-4">
                  {['Summit', 'Hackathon', 'Workshop'].map(category => (
                    <div key={category} className="flex items-center gap-2">
                      <div className={`w-4 h-4 rounded bg-gradient-to-r ${getCategoryColor(category)}`}></div>
                      <span className="text-sm text-gray-400">{category}</span>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          ) : (
            renderListView()
          )}
        </div>
      </div>

      {/* Event Detail Modal */}
      {selectedEvent && (
        <div
          className="fixed inset-0 bg-black/80 backdrop-blur-sm z-50 flex items-center justify-center p-4"
          onClick={() => setSelectedEvent(null)}
        >
          <div
            className="bg-gray-900 rounded-2xl border border-gray-800 max-w-2xl w-full max-h-[90vh] overflow-y-auto"
            onClick={(e) => e.stopPropagation()}
          >
            {/* Modal Header with gradient */}
            <div className={`h-32 bg-gradient-to-r ${getCategoryColor(selectedEvent.category)} relative`}>
              <button
                onClick={() => setSelectedEvent(null)}
                className="absolute top-4 right-4 p-2 bg-black/50 rounded-full hover:bg-black/70 transition-colors"
              >
                <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>

            {/* Modal Content */}
            <div className="p-8">
              <div className="flex items-center gap-3 mb-4">
                <span className={`px-4 py-1 rounded-full text-sm font-semibold bg-gradient-to-r ${getCategoryColor(selectedEvent.category)} text-white`}>
                  {selectedEvent.category}
                </span>
                {selectedEvent.featured && (
                  <span className="px-4 py-1 rounded-full text-sm font-semibold bg-gradient-to-r from-orange-500 to-yellow-500 text-white">
                    ⭐ Featured
                  </span>
                )}
              </div>

              <h2 className="text-3xl font-bold text-white mb-4">{selectedEvent.title}</h2>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6 text-gray-400">
                <div className="flex items-center gap-3">
                  <svg className="w-5 h-5 text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                  </svg>
                  <div>
                    <div className="text-xs text-gray-500">Date</div>
                    <div className="font-semibold">
                      {new Date(selectedEvent.date).toLocaleDateString('en-US', {
                        weekday: 'long',
                        year: 'numeric',
                        month: 'long',
                        day: 'numeric'
                      })}
                    </div>
                  </div>
                </div>

                {selectedEvent.time && (
                  <div className="flex items-center gap-3">
                    <svg className="w-5 h-5 text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                    <div>
                      <div className="text-xs text-gray-500">Time</div>
                      <div className="font-semibold">{selectedEvent.time}</div>
                    </div>
                  </div>
                )}

                <div className="flex items-center gap-3">
                  <svg className="w-5 h-5 text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                  </svg>
                  <div>
                    <div className="text-xs text-gray-500">Location</div>
                    <div className="font-semibold">{selectedEvent.location}</div>
                  </div>
                </div>

                {selectedEvent.duration && (
                  <div className="flex items-center gap-3">
                    <svg className="w-5 h-5 text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                    </svg>
                    <div>
                      <div className="text-xs text-gray-500">Duration</div>
                      <div className="font-semibold">{selectedEvent.duration}</div>
                    </div>
                  </div>
                )}
              </div>

              <div className="mb-6">
                <h3 className="text-lg font-semibold mb-2 text-purple-400">About this Event</h3>
                <p className="text-gray-300 leading-relaxed">{selectedEvent.description}</p>
              </div>

              {selectedEvent.instructor && (
                <div className="mb-6 p-4 bg-gray-800/50 rounded-lg">
                  <h3 className="text-lg font-semibold mb-2 text-purple-400">Instructor</h3>
                  <p className="text-gray-300">{selectedEvent.instructor}</p>
                </div>
              )}

              {selectedEvent.prize && (
                <div className="mb-6 p-4 bg-gradient-to-r from-orange-500/20 to-yellow-500/20 border border-orange-500/50 rounded-lg">
                  <h3 className="text-lg font-semibold mb-2 text-orange-400">Prize Pool</h3>
                  <p className="text-2xl font-bold text-white">{selectedEvent.prize}</p>
                </div>
              )}

              {selectedEvent.tags && selectedEvent.tags.length > 0 && (
                <div className="mb-6">
                  <h3 className="text-lg font-semibold mb-3 text-purple-400">Tags</h3>
                  <div className="flex flex-wrap gap-2">
                    {selectedEvent.tags.map((tag, idx) => (
                      <span
                        key={idx}
                        className="px-3 py-1 bg-gray-800 text-gray-300 rounded-full text-sm"
                      >
                        {tag}
                      </span>
                    ))}
                  </div>
                </div>
              )}

              {selectedEvent.registrationLink && (
                <a
                  href={selectedEvent.registrationLink}
                  className="block w-full"
                >
                  <button className="w-full p-[3px] relative">
                    <div className={`absolute inset-0 bg-gradient-to-r ${getCategoryColor(selectedEvent.category)} rounded-lg`} />
                    <div className="px-8 py-3 bg-gray-900 rounded-lg font-bold relative group transition duration-200 text-white hover:bg-transparent">
                      Register Now
                    </div>
                  </button>
                </a>
              )}
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default CalendarPage;
